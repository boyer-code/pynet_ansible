hostname = pylab7b.twb-tech.com (alias python_lab on my linux box)
username = jboyer
password = .,Rou73r.,
alias python_lab='ssh -l jboyer pylab7b.twb-tech.com'


username = 'pyclass'
password = '88newclass'

community_string = galileo

IP address = 50.76.53.27

pynet-rtr1 (Cisco 881) snmp_port=7961, ssh_port=22
pynet-rtr2 (Cisco 881) snmp_port=8061, ssh_port=8022
pynet-sw1 (Arista vEOS switch) ssh_port=8222, eapi_port=8243
pynet-sw2 (Arista vEOS switch) ssh_port=8322, eapi_port=8343
pynet-sw3 (Arista vEOS switch) ssh_port=8422, eapi_port=8443
pynet-sw4 (Arista vEOS switch) ssh_port=8522, eapi_port=8543
pynet-jnpr-srx1 (Juniper SRX) ssh_port=9822, netconf_port=830

#!/usr/bin/env python <---- needed at beginning of each python script



why git?
	- revision control for code
	- revision control for network devices
	- can i add network configurations or related parts into git?
	- infrastructure as code
	- 
github allows you to share git repositories online...other options available

git clone URL and it'll pull directly from terminal

.git folder contains git related stuff....
.objects within contains other details related

git commit -m "COMMENT" (-m for comments)
git add FILENAME adds to git
git log shows log of activities (can see each updated object with 'find . -type f' and compare to log)
.git/objects keeps old versions
git push pushes files somewhere
git push origin is an alias for the remote from when you did your clone
git remote -v shows you original locations
git push origin master (will push to the git original location)  (master is a refspec...unless otherwise specified pushes local branch master back to master)
git pull origin master brings down whole repo from master branch
git status shows changes not staged for commit or what's changed
git branch shows current branch
git log shows commit history
git branch NAME creates new branch names as such
git checkout NAME --switches branches to NAME
git add FOLDER will add folder and contents
git checkout NAME switches will update working directory of what's displayed as part of your branch
git merge NAME allows you to merge branches from named to current

then can decide if merging into master, or discarding to original
maybe always keep master, dev, test branches? have to determine how want to handle things

problem to solve w/ YAML / JSON is taking complex data structures (lists, dictionaries, dicts inside lists, etc) needs to be written to files and transmitted between processes/machines in a readable /comprehensible format

YAML used by Ansible

use pip to install pyyaml
import yaml
create list/whatever
then yaml.dump(variable)

>>> my_list = [0, 1, 2, 3, 4, 5, 6, 7, 'banana', 'hi', {'attribs': [0, 1, 2, 3, 4, 5, 6], 'ip_addr': '10.1.1.1'}]
>>> 
>>> yaml.dump(my_list)
'- 0\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- 7\n- banana\n- hi\n- attribs: [0, 1, 2, 3, 4, 5, 6]\n  ip_addr: 10.1.1.1\n'

yaml has 2 formats
	condensed
	human readable

can toggle between those two with  default_flow_style=T/F
>>> yaml.dump(my_list, default_flow_style=True)
'[0, 1, 2, 3, 4, 5, 6, 7, banana, hi, {attribs: [0, 1, 2, 3, 4, 5, 6], ip_addr: 10.1.1.1}]\n'

in YAML, strings don't have quotes

>>> print yaml.dump(my_list)
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- banana
- hi
- attribs: [0, 1, 2, 3, 4, 5, 6]
  ip_addr: 10.1.1.1

>>> print yaml.dump(my_list, default_flow_style=True)
[0, 1, 2, 3, 4, 5, 6, 7, banana, hi, {attribs: [0, 1, 2, 3, 4, 5, 6], ip_addr: 10.1.1.1}]

>>> print yaml.dump(my_list, default_flow_style=False)
- 0
- 1
- 2
- 3
- 4
- 5
- 6
- 7
- banana
- hi
- attribs:
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  ip_addr: 10.1.1.1

>>> 

in YAML, list elements indicated by hyphen

YAML is white-space sensitive

with open("somefile.yml" , "w") as f:
	f.write(yaml.dump(my_list, default_flow_style=False)

>>> import yaml
>>> with open("some_file.yml") as f:
...     new_list = yaml.load(f)
... 
>>> new_list
[0, 1, 2, 3, 4, 5, 6, 7, 'banana', 'hi', {'attribs': [0, 1, 2, 3, 4, 5, 6], 'ip_addr': '10.1.1.1', 'next_key': 'whatever', 'some_key': 'hello'}]

yaml.dump to write to file
yaml.load to read into python

Arista eAPI uses JSON

Cisco NXAPI can use JSON

>>> my_list
[0, 1, 2, 3, 4, 5, 6, 7, 'whatever', 'banana', {'attribs': [0, 1, 2, 3, 4], 'attributes': {}, 'ip_addr': '1.1.1.5'}]
>>> json.dumps(my_list)
'[0, 1, 2, 3, 4, 5, 6, 7, "whatever", "banana", {"attribs": [0, 1, 2, 3, 4], "attributes": {}, "ip_addr": "1.1.1.5"}]'

json does not like a comma for its last list/dict element

json.dumps to dump to python
json.dump to write to file
json.load to read from file

>>> my_list
[0, 1, 2, 3, 4, 5, 6, 7, 'whatever', 'banana', {'attribs': [0, 1, 2, 3, 4], 'attributes': {}, 'ip_addr': '1.1.1.5'}]
>>> json.dumps(my_list)
'[0, 1, 2, 3, 4, 5, 6, 7, "whatever", "banana", {"attribs": [0, 1, 2, 3, 4], "attributes": {}, "ip_addr": "1.1.1.5"}]'
>>> with open("my_file.json", "w") as f:
...     json.dump(my_list, f)

>>> with open("my_file.json") as f:
...     new_list = json.load(f)
... 
>>> 
>>> new_list
[0, 1, 2, 3, 4, 5, 6, 7, u'whatever', u'banana', {u'attribs': [0, 1, 2, 3, 4], u'vendor': u'cisco', u'ip_addr': u'1.1.1.5', u'platform': u'ASA'}]

>>> from pprint import pprint as pp
>>> pp(new_list)
[0,
 1,
 2,
 3,
 4,
 5,
 6,
 7,
 u'whatever',
 u'banana',
 {u'attribs': [0, 1, 2, 3, 4],
  u'ip_addr': u'1.1.1.5',
  u'platform': u'ASA',
  u'vendor': u'cisco'}]
>>> 

ciscoconfparse...designed to parse IOS for you

establishes parent/child relationship based on cisco spacing hierarchy

from ciscoconfparse import CiscoConfParse

>>> cisco_cfg = CiscoConfParse("cisco_crypto.txt")
>>> 
>>> cisco_cfg
<CiscoConfParse: 163 lines / syntax: ios / comment delimiter: '!' / factory: False>
>>> intf = cisco_cfg.find_objects(r"^interface")
>>>
>>> intf
[<IOSCfgLine # 116 'interface FastEthernet0'>, <IOSCfgLine # 119 'interface FastEthernet1'>, <IOSCfgLine # 122 'interface FastEthernet2'>, <IOSCfgLine # 125 'interface FastEthernet3'>, <IOSCfgLine # 128 'interface FastEthernet4'>, <IOSCfgLine # 134 'interface Vlan1'>]

>>> for line in intf:
...     print line.text
... 
interface FastEthernet0
interface FastEthernet1
interface FastEthernet2
interface FastEthernet3
interface FastEthernet4
interface Vlan1
>>> 

>>> fa4 = intf[4]
>>> fa4
<IOSCfgLine # 128 'interface FastEthernet4'>
>>> fa4.children
[<IOSCfgLine # 129 ' description *** LAN connection (don't change) ***' (parent is # 128)>, <IOSCfgLine # 130 ' ip address 10.220.88.20 255.255.255.0' (parent is # 128)>, <IOSCfgLine # 131 ' duplex auto' (parent is # 128)>, <IOSCfgLine # 132 ' speed auto' (parent is # 128)>]
>>> for child in fa4.children:
...     print child
... 
<IOSCfgLine # 129 ' description *** LAN connection (don't change) ***' (parent is # 128)>
<IOSCfgLine # 130 ' ip address 10.220.88.20 255.255.255.0' (parent is # 128)>
<IOSCfgLine # 131 ' duplex auto' (parent is # 128)>
<IOSCfgLine # 132 ' speed auto' (parent is # 128)>
>>> for child in fa4.children:
...     print child.text
... 
 description *** LAN connection (don't change) ***
 ip address 10.220.88.20 255.255.255.0
 duplex auto
 speed auto


NAME.children only gives one level below
NAME.all_children includes "grandchildren" or double nested

can call child and work in reverse with child.parent, child.all_parents

>>>cisco_cfg.find_objects_w_child(parentspec=r"^interface", childspec=r"no ip address")
[<IOSCfgLine # 116 'interface FastEthernet0'>, <IOSCfgLine # 119 'interface FastEthernet1'>, <IOSCfgLine # 122 'interface FastEthernet2'>, <IOSCfgLine # 125 'interface FastEthernet3'>, <IOSCfgLine # 134 'interface Vlan1'>]

can also do find_objects_wo_child  #negative match
>>>cisco_cfg.find_objects_wo_child(parentspec=r"^interface", childspec=r"no ip address")
[<IOSCfgLine # 128 'interface FastEthernet4'>]

can parse show interface output with the same...

and other show commands...not limited to just Cisco either

using and finding python libraries (see modules & packages in free course week 8)
python
import sys
from pprint import pprint

pprint.ppring(sys.path)
output shows path where we'll look for python stuff
on linux can update with (from terminal):
export PYTHONPATH='/home/skas/python/pynet_ansible/subdir'  where the path is whatever path you need
OR can add files to:
/usr/lib/python27/site-packages...

can keep all modules in same folder, but dangerous (drift, etc)...better to update path with module location or add to site-packages

SNMP:
don't use for config changes
good for data collection/gathering
SNMP OID = string of numbers with hierarchy
OID specifies something in device that it'll try to get data on/from
if data is scalar/single value, have to add .0 to end of OID
if it's tabular, have to append each row of table onto OID
MIB = management information base
some section of SNMP objects in SNMP device
a definition of SNMP objects
human readable name
interpretation of data to be sent back
two main choices for python + snmp:
pysnmp
netsnmp

using pysnmp for this class...100% python
netsnmp is a C library ported

netsnmp utilities on linux are helpful for testing & snmp walks, but pysnmp easier in code

telnetlib

if __name__ == "__main__":
        main()

allows you to separate test from executable code

if passing the same variable over and over, may want to consider classes

installing libraries
find tarball/archive
python setup.py install

iso 1.3.6.1.2.1.1.1 (system description)

snmpget -Os -c galileo -v 1 50.76.53.27:7961 1.3.6.1.2.1.1.1.0
snmpwalk -Os -c galileo -v 1 50.76.53.27:7961 1.3.6.1.2.1.1


snmp v3
creating ravs/images from python SNMP generated data
creating email notifications from SNMP events w/ Python...

v3 adds encryption
v3 adds authentication

snmp_helper contains snmp_get_oid_v3 which requires a_device (tuple containing  a_host and snmp_port) and a_user (tupe containing user_name, auth_key, encrypt_key)

snmpwalk -Os -c galileo -v 1 50.76.53.27:8061 1.3.6.1.2.1.2 <- interface stats

pygal is an svg library for python...graphing utility
----
import pygal
fa4_in_octets = [1,2,3,4,5,6,7]
fa4_out_octets = [7,6,5,4,3,2,1]

fa4_in_packets = [2,4,6,8,10,12]
fa4_out_packets = [2,4,8,16,32,64]

line_chart = pygal.Line()

line_chart.title = 'I/O Packets & Bytes'
line_chart.x_labels = ['5', '10', '15', '20', '25', '30']
line_chart.add('InPackets', fa4_in_packets)
line_chart.add('OutPackets', fa4_out_packets)
line_chart.add('InBytes', fa4_out_octets)
line_chart.add('OutBytes', fa4_in_octets)

line_chart.render_to_file('test.svg')
----


send_mail function, ftw
recipient, subject, message, sender

----
def send_mail(recipient, subject, message, sender):
    '''
    Simple function to help simplify sending SMTP email

    Assumes a mailserver is available on localhost
    '''

    import smtplib
    from email.mime.text import MIMEText

    message = MIMEText(message)
    message['Subject'] = subject
    message['From'] = sender
    message['To'] = recipient

    # Create SMTP connection object to localhost
    smtp_conn = smtplib.SMTP('localhost')

    # Send the email
    smtp_conn.sendmail(sender, recipient, message.as_string())

    # Close SMTP connection

    smtp_conn.quit()

    return True
----
import email_helper

recipient = 'ktbyersx@gmail.com'
subject = 'Test message'
message = '''

This is a fictional test message.


Regards,

Kirk

'''

sender = 'ktbyers@twb-tech.com'
email_helper.send_mail(recipient, subject, message, sender)
----
pickle:

>>> import pickle
>>> f = open("temp3.pkl", "wb")
>>> a = range(10)
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> a.append('whatever')
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'whatever']
>>> pickle.dump(a, f)
>>> 
>>> b = a[5:]
>>> b
[5, 6, 7, 8, 9, 'whatever']
>>> pickle.dump(b, f)
>>> f.close()
>>> exit()
(applied_python)[jboyer@ip-172-30-0-39 ~]$ cat temp3.pkl 
(lp0
I0
aI1
aI2
aI3
aI4
aI5
aI6
aI7
aI8
aI9
aS'whatever'
p1
a.(lp0
I5
aI6
aI7
aI8
aI9
aS'whatever'
p1
a.(applied_python)[jboyer@ip-172-30-0-39 ~]$ python
Python 2.7.10 (default, Dec  8 2015, 18:25:23) 
[GCC 4.8.3 20140911 (Red Hat 4.8.3-9)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import pickle
>>> f = open("temp3.pkl", "rb")
>>> a = pickle.load(f)
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'whatever']
>>> b
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'b' is not defined
>>> b = pickle.load(f)
>>> b
[5, 6, 7, 8, 9, 'whatever']
>>> 


-----

paramiko = python ssh library
make & manage ssh connections ton etwork devices
---
ansible = devops tool... ~3ish years old...competes with puppet, chef, salt, etc
lets you provision (create system in certain way)
orchestration
config standardization

why should NE care about ansible?
- agentless (no SW to run on boxes)
- several other config management devices require it
- uses SSH for transport mechanism
- low overhead to productivity (shallow learning curve/time to start)
- deploy config files w/ it (nagios configs, blah blah)
- server turnup
- templating
- have ansible control machine (server)
- provide ansible script to ACM...uses SSH to transfer python modules to remote machine (machine to execute tasks upon) and then gets tasks done
- item potent  ...only changes things if they need to be changed...if state is already correct, will check (in advance) and make no changes
- remote box must have python on it
- and ability to do something with that python (permissions?)
- ansible can also operate in local mode (can locally run ansible playbook...like call API of remote device)
- juniper API requires netconf over ssh...
- to use juniper w/ ansible...makes netconf over ssh connection then performs actions from ansible playbook

NE use cases for Ansible:
network configuration templating
- take variable file (excel file with basic info)...input file
- read variable file and write to template and build config for you
- can do this in bulk and say...build out a zone/cell
config management/changes
- limited on arista
- limited on juniper
- no mention of cisco
- works great on cumulus (pure linux)

ansible script = playbook
use YAML format
(computer parsable language)
(human readable/writeable)

YAML file always starts with '---'
indentation matters (white space sensitive)
can create lists and dictionaries in YAML

- element1
- element2
- element3
- element4

would create a list with 4 elements

- key1: value1

YAML dictionaries in key:value format

{key1: value1, key2: value2}

#comments are prepended with a #

